// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: careerhub/posting_service/suggester/suggester_grpc/posting.proto

package suggester_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostingClient is the client API for Posting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostingClient interface {
	GetPostings(ctx context.Context, in *GetPostingsRequest, opts ...grpc.CallOption) (*GetPostingsResponse, error)
}

type postingClient struct {
	cc grpc.ClientConnInterface
}

func NewPostingClient(cc grpc.ClientConnInterface) PostingClient {
	return &postingClient{cc}
}

func (c *postingClient) GetPostings(ctx context.Context, in *GetPostingsRequest, opts ...grpc.CallOption) (*GetPostingsResponse, error) {
	out := new(GetPostingsResponse)
	err := c.cc.Invoke(ctx, "/careerhub.posting_service.suggester_grpc.Posting/GetPostings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostingServer is the server API for Posting service.
// All implementations must embed UnimplementedPostingServer
// for forward compatibility
type PostingServer interface {
	GetPostings(context.Context, *GetPostingsRequest) (*GetPostingsResponse, error)
	mustEmbedUnimplementedPostingServer()
}

// UnimplementedPostingServer must be embedded to have forward compatible implementations.
type UnimplementedPostingServer struct {
}

func (UnimplementedPostingServer) GetPostings(context.Context, *GetPostingsRequest) (*GetPostingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostings not implemented")
}
func (UnimplementedPostingServer) mustEmbedUnimplementedPostingServer() {}

// UnsafePostingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostingServer will
// result in compilation errors.
type UnsafePostingServer interface {
	mustEmbedUnimplementedPostingServer()
}

func RegisterPostingServer(s grpc.ServiceRegistrar, srv PostingServer) {
	s.RegisterService(&Posting_ServiceDesc, srv)
}

func _Posting_GetPostings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostingServer).GetPostings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.posting_service.suggester_grpc.Posting/GetPostings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostingServer).GetPostings(ctx, req.(*GetPostingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Posting_ServiceDesc is the grpc.ServiceDesc for Posting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Posting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "careerhub.posting_service.suggester_grpc.Posting",
	HandlerType: (*PostingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostings",
			Handler:    _Posting_GetPostings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "careerhub/posting_service/suggester/suggester_grpc/posting.proto",
}
